#!/bin/bash

# The databases live in variables and are written/read from disk as needed
__SERVERDB=""
__GROUPDB=""

########################
##  DEFINE FUNCTIONS  ##
########################
#
# To keep the code path as simple as possible, functions
# are extensively used for processing command inputs
#

# Help Function
# I needz da halp nao plox
#
# Cat with heredoc trick used to make it easier to write the helptext.
# Reminder to maintainer: Spaces here are used for alignment. Tabwidth can vary on different displays.
# Tabs are used throughout the document for indentation, with spaces for alignment. See the serverop
# function for an example of how to properly mix tabs and spaces.
help(){
	if [ ! -z "$1" ]; then
		case "$1" in
			help)     cat << __HELP__
Help options:
  help             Displays the command list and command line arguments
  help <command>   Displays more information about <command>

__HELP__
			          ;;
			exit)     cat << __HELP__
Exit options:
  exit    Quits the command line interface

Hint: Ctrl+D will also exit the CLI interface

__HELP__
			          ;;
			server)   cat << __HELP__
Server options:
  server list                             Gets a list of defined servers
  server add <[user@]host[:port]> [nick]  Adds a server with nickname [nick] to the server databse.
                                          By default, host is used as [nick] if not set, and sets user
                                          to the current user.
  server delete <nick>                    Deletes a server from the server database.

__HELP__
			          ;;
			group)    cat << __HELP__
Group options:
  group list                                       Gets a list of defined groups
  group create <group>                             Creates a server group
  group delete <group>                             Deletes a group from the group list. All servers in the group
                                                   are still retained.
  group <group> add <nick1> [nick2 [nick3...]]     Adds a set of servers to the given group.
  group <group> remove <nick1> [nick2 [nick3...]]  Removes a set of servers from the given group

__HELP__
			          ;;
			dispatch) cat <<__HELP__
Dispatch options:
  dispatch <server|group> <nick> <command>    Dispatches <command> to the server(s) specified by <nick>

__HELP__
			          ;;
			status)   cat <<__HELP__
Status options:
  status <server|group> <nick>  Checks whether the server(s) specified by <nick> are up and listening to ssh

__HELP__
			          ;;
		esac
	else
		cat << __HELP__
ROPE - Remote OPErations console
A utility to manage multiple remote systems

Command line options:
   -d <dir>  Sets the Data Directory, where configuration and machine information is stored.
   -i <key>  Location of the SSH Private Key/Identity file to utilize when connecting to remote machines.
   -n        Do not load the config file. This runs the interface in memory-only mode.
             When enabled, no data is written to, or loaded from disk.
             Note: calls out via ssh/rsync still reference the disk.
   -h        Show this help message

Console Commands:
  exit      Exits the console
  help      Shows the help message for [command]
  server    Modifies or queries the server database
  group     Modifies or queries the group database
  dispatch  Dispatches commands to a server or group of servers
  status    Checks if servers are up and responding

Hint: use help [command] to find more information about a command

__HELP__
	fi
}

# Group db functions
groupdbmod() {
	mod="$1"
	shift
	case "$mod" in
		      # Logic here makes sure we don't have an extra newline at the beginning of the
		      # __GROUPDB string. There probably is a better way to do it, but I couldn't think
		      # of one, and didn't want to be too "clever"
		cre)  if groupdbmod exst "$*" &>/dev/null; then
			      echo "Group '$*' already exists" >&2
			      return 1
		      fi

		      if [ -z "$__GROUPDB" ]; then
			      __GROUPDB="$*:"
		      else
			      __GROUPDB="$__GROUPDB"$'\n'"$*:"
		      fi

		      return 0 ;;

		del)  __GROUPDB="$(grep -v "^$*:" <<< "$__GROUPDB")" ;;


		      # Okay, there's a lot to unpack from the next few statements
		      # Any group modification here requires a modification to one line of the group database
		      # So using grep, we pick out the correct line, then perform the modification on that line
		      # Using a `grep -v` allows us to add back in the lines to be left unaffected by the change
		      # The result is a reordered database, where the most recently edited line is at the top
		      # But the only place where this is noticed is when a list is run.
		      #
		      # The use of sed in the remove function is safe, since we know that no special characters
		      # or '/' characters will exist in the nick see validnick()
		add)  __GROUPDB="$(grep "^$1:" <<< "$__GROUPDB")$2:"$'\n'"$(grep -v "^$1:" <<< "$__GROUPDB")"
		      __GROUPDB="$(grep -v '^$' <<< "$__GROUPDB")" ;;
		rem)  __GROUPDB="$(sed "s/:$2:/:/" <<< "$(grep "^$1:" <<< "$__GROUPDB")")"$'\n'"$(grep -v "^$1:" <<< "$__GROUPDB")" ;;


		      # Checks if a group exists or not
		exst) if [ -z "$(grep "^$*:" <<< "$__GROUPDB")" ]; then
			      echo "Group '$*' does not exist." >&2
			      return 1
		      fi
		      return 0 ;;

		      # Checks if a server is a member of a group
		memb) if [ -z "$(grep "^$1:" <<< "$__GROUPDB" | grep ":$2:")" ]; then
			      return 1
		      fi

		      return 0 ;;
	esac
}

# Server db functions
serverdbmod() {
	mod="$1"
	shift
	case "$mod" in
		      # Similar to groupdbmod, the logic here makes sure we don't have an extra newline
		      # at the beginning of the __SERVERDB string. There probably is a better way to
		      # do it, but I couldn't think of one, and didn't want to be too "clever"
		add)  if serverdbmod exst "$(cut -f1 -d: <<< "$*")" &>/dev/null; then
			      echo "Server '$*' already exists" >&2
			      return 1
		      fi

		      if [ -z "$__SERVERDB" ]; then
			      __SERVERDB="$*"
		      else
			      __SERVERDB="$__SERVERDB"$'\n'"$*"
		      fi

		      return 0 ;;
		del)  __SERVERDB="$(grep -v "^$*:" <<< "$__SERVERDB")" ;;
		      # Checks if a server exists
		exst) if [ -z "$(grep "^$*:" <<< "$__SERVERDB")" ]; then
			      echo "Server '$*' does not exist." >&2
			      return 1
		      fi
		      return 0 ;;
	esac
}

# Checks to make sure the given serverstring is valid
validserver() {
	# Check for illegal characters in the input
	# The strings will not be equivalent if any char is outside
	# the range of printable ascii.
	if [ "$*" = "$(tr -dc '\040-\176' <<< "$*")" ]; then
		return 0
	fi

	# Regex match to determine correct format.
	# By the time we reach here, we know there are no
	# nonprintable characters (\r, \t, \n, DEL, ESC, etc.)
	grep '^\([^:@]\+@\)\?[a-zA-Z0-9.-]\+\(:[0-9]\+\)\?$' <<< "$*" &>/dev/null
	return $?
}

# Gets the hostname portion of a valid server string,
# as validated by validserver()
gethostfromserver() {
	srv="$(cut -f1 -d':' <<< "$1" | tr -d '\n')"
	if grep '@' <<< "$1" &>/dev/null; then
		cut -f2 -d'@' <<< "$srv" | tr -d '\n'
	else
		echo -n "$srv"
	fi
}

# Checks to make sure the given nickstring is valid
validnick() {
	# Check for illegal characters in the input
	# The strings will not be equivalent if [^a-zA-Z0-9.-] exist
	if [ "$*" = "$(tr -dc 'a-zA-Z0-9.-' <<< "$*")" ]; then
		return 0
	fi

	# Print helpful error message
	echo "Invalid nick '$(tr -dc '\040-\176' <<< "$*")'" >&2
	echo "Nicks may only consist of [a-zA-Z0-9.-]" >&2

	return 1
}

# Checks if a groupname is valid. The requirements are basically the same
# as for validnick, but a groupname cannot be list, create, or delete
validgroupname() {
	if ! validnick "$*"; then
		return 1
	fi

	if [ "$*" = "list" ] || [ "$*" = "create" ] || [ "$*" = "delete" ]; then
		# Print helpful error message
		echo "Invalid nick '$(tr -dc '\040-\176' <<< "$*")'" >&2
		echo "Group names may not be 'list', 'create' or 'delete'" >&2

		return 1
	fi

	return 0
}

# Handler for the server command
serverop() {
	cmd="$1"
	shift
	case "$cmd" in
		list)   if [ -z "$__SERVERDB" ]; then
			        echo "No servers found"
		        else
		            cat <<< "$__SERVERDB"
		        fi ;;
		add)    if validserver "$1"; then
			        if [ ! -z "$2" ]; then
				        if validnick "$2"; then
					        if serverdbmod add "$2:$1"; then
						        echo "Added server '$2'";
					        fi
				        fi
			        else
				        nick="$(gethostfromserver "$1")"
			            if serverdbmod add "$nick:$1"; then
							echo "Added server '$nick'"
				        fi
			        fi
		        fi ;;
		delete) if validnick "$1" && serverdbmod exst "$1"; then
			        serverdbmod del "$1"
			        echo "Removed server '$1'";
		        fi ;;
	esac
}

# Handles group modification
groupmod() {
	cmd="$1"
	gname="$2"

	# Make sure the group name is valid
	if ! validgroupname "$gname"; then
		return 1
	fi

	# Make sure the group exists
	if ! groupdbmod exst "$gname"; then
		return 1
	fi

	shift 2

	case "$cmd" in
		add)    while [ ! -z "$1" ]; do
			        if ! serverdbmod exst "$1"; then
				        return 1
			        fi

			        if groupdbmod memb "$gname" "$1"; then
				        echo "Server '$1' already exists in '$gname'" >&2
			        else
				        groupdbmod add "$gname" "$1"
				        echo "Added '$1' to '$gname'";
			        fi

			        shift
		        done ;;
		remove) while [ ! -z "$1" ]; do
			        if ! serverdbmod exst "$1"; then
				        return 1
			        fi

			        groupdbmod rem "$gname" "$1"
			        echo "Removed '$1' from '$gname'";
			        shift
		        done ;;
	esac
}

# Handler for the group command
groupop() {
	cmd="$1"
	shift

	# Process group creation/deletion commands
	case "$cmd" in
		list)   if [ -z "$__GROUPDB" ]; then
			        echo "No groups found"
		        else
			        cat <<< "$__GROUPDB"
		        fi ;;
		create) if validgroupname "$1"; then
				    if groupdbmod cre "$1"; then
				        echo "Group '$1' created"
			        fi
		        fi ;;
		delete) if validgroupname "$1" && groupdbmod exst "$1"; then
			        groupdbmod del "$1"
			        echo "Group '$1' deleted"
		        fi ;;
		*)      # Time for a little inversion. The rest of these commands take a group name before the actual command
		        gname="$cmd"
		        cmd="$1"
		        shift

		        # This is a group modification
		        groupmod "$cmd" "$gname" "$@"
		        ;;
	esac
}

runop() {
	nick="$1"
	shift

	# Get server
	server="$(grep "^$nick:" <<< "$__SERVERDB" | cut -f2- -d:)"

	sshhost="$(cut -f1 -d':' <<< "$server")"
	sshport="$(cut -f2 -d':' <<< "$server:")"

	if [ -z "$sshport" ]; then
		sshport=22
	fi

	if [ ! -z "$SSH_KEY_LOCATION" ]; then
		ssh -t "$sshhost" -p "$sshport" -i "$SSH_KEY_LOCATION" "$*"
	else
		ssh -t "$sshhost" -p "$sshport" "$*"
	fi
}

checkstatus() {
	nick="$1"
	shift

	# Get server
	server="$(grep "^$nick:" <<< "$__SERVERDB" | cut -f2- -d: | cut -f2 -d@)"

	sshhost="$(cut -f1 -d':' <<< "$server")"
	sshport="$(cut -f2 -d':' <<< "$server:")"

	if [ -z "$sshport" ]; then
		sshport=22
	fi

	echo -en "       Checking host '$server'\r";

	if nc -vzw1 "$sshhost" "$sshport" &>/dev/null; then
		echo -e "\033[32m[ OK ]\033[0m"
	else
		echo -e "\033[31m[FAIL]\033[0m"
	fi
}

dispatchop() {
	method="$1"
	ntype="$2"
	nick="$3"
	shift 3

	if [ "$ntype" == "group" ]; then
		if groupdbmod exst "$nick"; then
			# Iterate through servers
			# Get server list
			servers="$(grep "^$nick:" <<< "$__GROUPDB" | cut -f2- -d:)"

			__oldifs="$IFS"
			IFS=":"

			for server in $servers; do
				IFS="$__oldifs"

				if [ "$method" = "dispatch" ]; then
					runop "$server" "$@"
				elif [ "$method" = "status" ]; then
					checkstatus "$server"
				fi

				__oldifs="$IFS"
				IFS=":"
			done

			IFS="$__oldifs"
		fi
	elif [ "$ntype" == "server" ]; then
		if serverdbmod exst "$nick"; then
			if [ "$method" = "dispatch" ]; then
				runop "$nick" "$@"
			elif [ "$method" = "status" ]; then
				checkstatus "$nick"
			fi
		fi
	else
		echo "Unrecognized type '$ntype'. Expecting 'group' or 'server'." >&2
	fi
}

do_command() {
	cmd="$1"
	shift
	case "$cmd" in
		help)     help "$*" ;;
		server)   serverop "$@" ;;
		group)    groupop "$@" ;;
		dispatch) dispatchop dispatch "$@" ;;
		status)   dispatchop status "$@" ;;
	esac
}

#################################
##  CONFIGURATION INFORMATION  ##
#################################
#
# Order of precedence:
#   1. Specified via commandline arguments
#   2. Found in config file
#   3. Sane defaults, defined below
#
SSH_KEY_LOCATION=""      # Let SSH find the key
CONF_DATA_DIRECTORY=""   # Search will populate if not given by CLI args
CONF_DATA_DIRECTORY_SEARCH="$HOME/.config/rope/:/etc/rope/"

# Define argument-only defaults
MEMORY_MODE=0
CONF_SEARCH=1

# Parse arguments
# Getopt, because why not?
while getopts "hi:d:" opt; do
	case "$opt" in
		n) MEMORY_MODE=1
		   CONF_SEARCH=0 ;;
		d) CONF_DATA_DIRECTORY="$OPTARG"
		   CONF_SEARCH=0 ;;
		i) SSH_KEY_LOCATION="$OPTARG" ;;
		h) help
		   exit ;;
	esac
done

# Search for the data directory to use
if [ $CONF_SEARCH -eq 1 ]; then
	__oldifs="$IFS"
	IFS=":"
	for path in $CONF_DATA_DIRECTORY_SEARCH; do
		CONF_DATA_DIRECTORY="$path"
		if [ -d "$path" ]; then
			break
		fi
	done

	if [ ! -d "$CONF_DATA_DIRECTORY" ]; then
		for path in $CONF_DATA_DIRECTORY_SEARCH; do
			CONF_DATA_DIRECTORY="$path"
			if mkdir -p "$CONF_DATA_DIRECTORY" &>/dev/null; then
				break
			fi
		done
	fi

	IFS="$__oldifs"
fi

if [ ! -d "$CONF_DATA_DIRECTORY" ]; then
	mkdir -p "$CONF_DATA_DIRECTORY"
fi

CONF_FILE="$CONF_DATA_DIRECTORY/rope.conf"
GROUP_DB_FILE=""
SERVER_DB_FILE=""
HISTORY_FILE=""

history -c

# Load config file
if [ $MEMORY_MODE -eq 0 ]; then
	GROUP_DB_FILE="$CONF_DATA_DIRECTORY/groups.db"
	SERVER_DB_FILE="$CONF_DATA_DIRECTORY/servers.db"
	HISTORY_FILE="$CONF_DATA_DIRECTORY/history"

	if [ -f "$GROUP_DB_FILE" ]; then
		__GROUPDB="$(cat "$GROUP_DB_FILE")"
	fi

	if [ -f "$GROUP_DB_FILE" ]; then
		__SERVERDB="$(cat "$SERVER_DB_FILE")"
	fi

	if [ -f "$HISTORY_FILE" ]; then
		history -r "$HISTORY_FILE"
	fi

	if [ -f "$CONF_FILE" ]; then
		while read entry; do
			key="$(cut -f1 -d: <<< "$entry")"
			val="$(cut -f2- -d: <<< "$entry")"

			case "$key" in
				ssh_key) if [ -z "$SSH_KEY_LOCATION" ]; then
					         SSH_KEY_LOCATION="$val"
				         fi ;;
			esac
		done < "$CONF_FILE"
	fi
fi

# Kill current running command, but keep script running
trap : INT

#####################
##  READ COMMANDS  ##
#####################
#
# Proper readline support FTW
#
while true; do
	read -ep "> " cmd

	# Check to see if the user wanted to exit.
	if [ $? -ne 0 ] || [ "$cmd" = "exit" ]; then
		printf "\r"
		break
	fi

	history -s "$cmd"
	do_command $cmd
done

if [ ! -z "$GROUP_DB_FILE" ]; then
	tee "$GROUP_DB_FILE" <<< "$__GROUPDB" >/dev/null
fi

if [ ! -z "$SERVER_DB_FILE" ]; then
	tee "$SERVER_DB_FILE" <<< "$__SERVERDB" >/dev/null
fi

if [ ! -z "$HISTORY_FILE" ]; then
	history -w "$HISTORY_FILE"
fi
